openapi: 3.0.0
info:
  title: Gateway & Terminal Service API
  description: |
    Secure WebSocket gateway that multiplexes SSH PTYs to remote hosts.
    Enforces max 6 concurrent sessions per user with command firewall and AI analysis.
  version: 1.0.0
  contact:
    name: AI DAW Team

servers:
  - url: http://localhost:3002
    description: Development server

paths:
  /health:
    get:
      summary: Health check
      operationId: healthCheck
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  service:
                    type: string
                    example: gateway
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: 1.0.0

  /api/sessions:
    post:
      summary: Create a new SSH PTY session
      operationId: createSession
      tags:
        - Sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - hostId
                - user
              properties:
                hostId:
                  type: string
                  description: ID of the host to connect to
                  example: production-server-1
                user:
                  type: string
                  description: Username for session tracking
                  example: john.doe
                cols:
                  type: integer
                  description: Terminal columns
                  default: 80
                  example: 120
                rows:
                  type: integer
                  description: Terminal rows
                  default: 24
                  example: 40
      responses:
        '201':
          description: Session created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: Session ID
                  status:
                    type: string
                    enum: [connecting, active, inactive, terminated]
                  createdAt:
                    type: integer
                    description: Unix timestamp in milliseconds
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error (e.g., max sessions reached, SSH connection failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/sessions/{sessionId}:
    get:
      summary: Get session information
      operationId: getSession
      tags:
        - Sessions
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Session information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Terminate a session
      operationId: deleteSession
      tags:
        - Sessions
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Session terminated successfully
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/ai/analyze:
    post:
      summary: Analyze session logs with AI (manual trigger only)
      operationId: analyzeSession
      tags:
        - AI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sessionId
              properties:
                sessionId:
                  type: string
                  format: uuid
                tokenBudget:
                  type: integer
                  description: Maximum tokens to use for AI analysis
                  default: 1000
                  example: 2000
      responses:
        '200':
          description: AI analysis results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIAnalysis'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: AI service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Session:
      type: object
      properties:
        id:
          type: string
          format: uuid
        hostId:
          type: string
        user:
          type: string
        status:
          type: string
          enum: [connecting, active, inactive, terminated]
        createdAt:
          type: integer
          description: Unix timestamp in milliseconds
        lastActivity:
          type: integer
          description: Unix timestamp in milliseconds
        deniedCommands:
          type: integer
          description: Number of commands denied by firewall

    AIAnalysis:
      type: object
      properties:
        suggestions:
          type: array
          items:
            type: object
            properties:
              command:
                type: string
                example: "git status"
              description:
                type: string
                example: "Check current repository status"
              riskLevel:
                type: string
                enum: [low, medium, high, critical]
              requiresApproval:
                type: boolean
        summary:
          type: string
          description: Summary of session activity
        tokenUsage:
          type: integer
          description: Actual tokens used for analysis

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message

  x-websocket-paths:
    /term/{sessionId}:
      description: |
        WebSocket endpoint for real-time terminal I/O.
        Connect after creating a session via POST /api/sessions.

      messages:
        client-to-server:
          input:
            description: Send input to terminal
            schema:
              type: object
              properties:
                type:
                  type: string
                  const: input
                data:
                  type: string
                  description: Input data to send

          resize:
            description: Resize terminal window
            schema:
              type: object
              properties:
                type:
                  type: string
                  const: resize
                cols:
                  type: integer
                rows:
                  type: integer

          heartbeat:
            description: Keep session alive
            schema:
              type: object
              properties:
                type:
                  type: string
                  const: heartbeat

        server-to-client:
          data:
            description: Terminal output data
            schema:
              type: object
              properties:
                type:
                  type: string
                  const: data
                data:
                  type: string

          status:
            description: Session status update
            schema:
              type: object
              properties:
                type:
                  type: string
                  const: status
                status:
                  type: string
                  enum: [connecting, active, inactive, terminated]

          exit:
            description: Session exited
            schema:
              type: object
              properties:
                type:
                  type: string
                  const: exit
                exitCode:
                  type: integer

          error:
            description: Error occurred
            schema:
              type: object
              properties:
                type:
                  type: string
                  const: error
                error:
                  type: string

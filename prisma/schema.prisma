// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============================================
// CHAT-TO-CREATE MODELS
// ============================================

model Conversation {
  id        String   @id @default(uuid())
  userId    String
  projectId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messages  Message[]

  @@index([userId])
  @@index([projectId])
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  role           String       // user | assistant | system
  content        String       // Text content
  intent         String?      // GENERATE_BEAT, MIX_TRACK, etc.
  entities       String?      // JSON string: { genre, bpm, key, mood }
  generationId   String?
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([generationId])
}

model Generation {
  id          String    @id @default(uuid())
  userId      String
  projectId   String?
  type        String    // beat | stems | mix | master
  status      String    // pending | processing | completed | failed
  input       String    // JSON string: User request parameters
  output      String?   // JSON string: Generated audio URLs, metadata
  provider    String
  cost        Float     @default(0)
  duration    Int?
  createdAt   DateTime  @default(now())
  completedAt DateTime?

  @@index([userId])
  @@index([status])
}

// ============================================
// USER AUTHENTICATION & PROFILES
// ============================================

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String?   // Nullable for OAuth-only users
  name          String?
  profileImage  String?

  // OAuth providers
  googleId      String?   @unique
  googleEmail   String?

  // Account status
  emailVerified Boolean   @default(false)
  isActive      Boolean   @default(true)

  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?

  // Relations
  sessions      Session[]
  aiMemories    AIMemory[]
  projects      Project[]

  @@index([email])
  @@index([googleId])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

// ============================================
// AI PERSISTENT MEMORY SYSTEM
// ============================================

model AIMemory {
  id           String   @id @default(uuid())
  userId       String

  // Memory content
  type         String   // preference | fact | context | interaction
  category     String?  // music_production | mixing | workflow | personal
  content      String   // The actual memory content
  metadata     String?  // JSON: { confidence, source, tags, etc. }

  // Memory importance and retrieval
  importance   Int      @default(5) // 1-10 scale
  accessCount  Int      @default(0)
  lastAccessed DateTime @default(now())

  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  expiresAt    DateTime? // Optional expiration for temporary memories

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([importance])
  @@index([lastAccessed])
}

// ============================================
// PROJECTS & RECORDINGS
// ============================================

model Project {
  id          String   @id @default(uuid())
  userId      String
  name        String
  description String?

  // Project settings
  tempo       Int      @default(120)
  key         String   @default("C")
  timeSignature String @default("4/4")

  // Project data
  tracks      String   // JSON: Track configuration
  metadata    String?  // JSON: Additional project metadata

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// ============================================
// EXISTING MODELS (if any)
// Add your existing models below
// ============================================
